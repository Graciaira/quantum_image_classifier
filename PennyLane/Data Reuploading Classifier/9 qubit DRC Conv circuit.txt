dev = qml.device("default.qubit", wires=9)
#dev = qml.device("qiskit.aer", wires=9)
# Install any pennylane-plugin to run on some particular backend


@qml.qnode(dev)
def qcircuit(params, x=None, y=None):
    """A variational quantum circuit representing the Universal classifier + Conv.

    Args:
        params (array[float]): array of parameters
        x (array[float]): 2-d input vector
        y (array[float]): single output state density matrix

    Returns:
        float: fidelity between output state and input
    """
    # conv layer iteration
    for l in range(len(params[0])):
        # qubit iteration
        for q in range(9):
            # gate iteration
            for g in range(3):
                qml.Rot(*(params[0][l][3*g:3*(g+1)] * x[q][3*g:3*(g+1)] + params[1][l][3*g:3*(g+1)]), wires=q)

        # entangling layer
        if l%2 == 0:
            # for even layer (0, 2, 4, ...)
            qml.CZ(wires=[0,1])
            qml.CZ(wires=[2,3])
            qml.CZ(wires=[5,6])
            qml.CZ(wires=[7,8])
        if l%2 != 0:
            # for odd layer (1, 3, 5, ...)
            qml.CZ(wires=[1,2])
            qml.CZ(wires=[3,4])
            qml.CZ(wires=[6,7])
            
            qml.CZ(wires=[4,5])
            
            qml.CZ(wires=[0,8])


    return qml.expval(qml.Hermitian(y, wires=[0]))

'''
    # fc layer iteration
    for l in range(len(params[2])):
        # qubit iteration
        for q in range(9):
            qml.Rot(*params[2][l][3*q:3*(q+1)], wires=q)
'''